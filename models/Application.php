<?php

namespace app\models;

use Yii;

/**
 * Класс модели для таблицы "application" (заявки)
 *
 * @property int $id
 * @property string $equipment_id id оборудования
 * @property string $status_id id статуса
 * @property string $structure_id id структуры
 * @property string $problem Описание неисправности
 * @property string $place Место нахождения
 * @property int $breakdown_date Дата возникновения неисправности
 * @property int $repair_period Сроки ремонта
 * @property int $attachment_path Путь к файлу
 * @property string $file Для загрузки файла
 * @property int $shortname Имя файла без пути к нему
 */
class Application extends \yii\db\ActiveRecord
{
    public $file;
    public $shortname;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'application';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['equipment_id', 'status_id', 'structure_id', 'problem', 'place', 'breakdown_date', 'repair_period'], 'required'],
            [['problem', 'place'], 'string'],
            [[ 'equipment_id'], 'integer'],
            [[ 'file', 'attachment_path'], 'safe'],
            [['status_id', 'structure_id'], 'string', 'max' => 255],
            [['breakdown_date', 'repair_period',], 'date', 'format' => 'php:d.m.Y'],
            ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'equipment_id' => 'Equipment ID',
            'status_id' => 'Status ID',
            'structure_id' => 'Structure ID',
            'problem' => 'Описание неисправности',
            'place' => 'Место нахождения',
            'breakdown_date' => 'Дата возникновения неисправности',
            'repair_period' => 'Сроки ремонта',
            'serno' => 'Серийный номер оборудования',
            'attachment_path' => 'Путь к файлу',
            'file' => 'Приложение',
        ];
    }

    /**
     * Метод загрузки файла на сервер
     * @return bool если файл загружен успешно - true, иначе - false
     */
    public function upload()
    {
        if ($this->validate()) {

            $file_path = Yii::getAlias('@documents') . DIRECTORY_SEPARATOR . time() . '_' . $this->file->baseName . '.' . $this->file->extension;
            if ($this->file->saveAs($file_path)) {
                $this->attachment_path = $file_path;
                return true;
            }

        } else {
            return false;
        }
    }

    /**
     * Создание связи один к одному с моделью Equipment
     */
    public function getEquipment() {
        return $this->hasOne(Equipment::className(), ['id' => 'equipment_id']);
    }

    /**
     * Создание связи один к одному с моделью Structure
     */
    public function getStructure() {
        return $this->hasOne(Structure::className(), ['id' => 'structure_id']);
    }

    /**
     * Создание связи один к одному с моделью Status
     */
    public function getStatus() {
        return $this->hasOne(Status::className(), ['id' => 'status_id']);
    }

    /**
     * Преобразует форматы дат из unix timestamp
     * Вытягивает короткое имя файла из пути к нему
     */
    public function afterFind()
    {
        $this->breakdown_date = date('d.m.Y', $this->breakdown_date);
        $this->repair_period = date('d.m.Y', $this->repair_period);
        $this->shortname = (preg_match('#\d{9,}_(.*)#u',$this->attachment_path,$matches) !== 0 ? $matches[1]  : null);
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    /**
     * Преобразование времени к unix timestamp перед сохранением в базу
     * @param $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        $this->breakdown_date = strtotime($this->breakdown_date);
        $this->repair_period = strtotime($this->repair_period);

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
